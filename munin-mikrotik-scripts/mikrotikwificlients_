#!/usr/bin/php
<?php

# Original script from: http://wiki.mikrotik.com/wiki/Munin_Monitoring

# USAGE
#
# place the script in the munin plugins folder and use the following naming convention:
#
# mikrotikcpu_router-hostname_ifname
#
# example:
# mikrotikcwificlients_router01.local.net_wlan1
#
# Configuration:
#  - Install the routeros_api.class.php php class.
#  - Set your mikrotik user and pass in the $API->connect connection string.
#
#

// Change the following path as appropriate
require('/srv/http/munin/ros/routeros_api.class.php');

$API = new routeros_api();

// debug
$API->debug = false;

// Work out hostname and interface name
$param = explode("_",$argv[0],3);

if (isset($param[1])) {
  $hostname = $param[1];
} else {
  die("No hostname available. Filename should be like: mikrotikwificlients_example.changeip.net_ether1");
}

if (isset($param[2])) {
  $ifname = $param[2];
} else {
  die("No interface name available. Filename should be like: mikrotikwificlients_example.changeip.net_ether1");
}

// change username/password as appropriate
if ($API->connect($hostname, 'munin', 'munin')) {

   $API->write('/interface/wireless/monitor',false);
   $API->write('=numbers='.$ifname,false);
   $API->write('=once=');

   $READ = $API->read(false);
   $interfaces = $API->parse_response($READ);
 //  print_r($interfaces);
   $API->disconnect();

   $connect = 'yes';
} else {
   $connect = 'no (could not connect)';
}

if ($argc > 1 && $argv[1] == 'autoconf') {
  print $connect . "\n";
  exit;
}

// Output configuration information
if ($argc > 1 && $argv[1] == 'config') {
  print "host_name $hostname\n";
  print "graph_args --base 1000 -l 0\n";
  print "graph_title $ifname clients\n";
  print "graph_vlabel clients\n";
  print "graph_scale no\n";
  print "graph_category network\n";
  print "graph_info This graph shows the registered and authenticated clients of a wireless interface\n";
  print "reg.label registered\n";
//  print "reg.draw AREA\n";
  print "auth.label authenticated\n";
//  print "auth.draw AREA\n";

  exit;
}

// Exit if we don't have any servers to report on.
if (empty($interfaces)) {
  exit;
}

// Finally, print it all out.
    foreach ($interfaces as $interface)
    {
	    //print_r($interface);
	    $rxbytes = $interface['registered-clients'];
	    $txbytes = $interface['authenticated-clients'];
	    print ("reg.value ") . $rxbytes . "\n";
	    print ("auth.value ") . $txbytes . "\n";
    }

exit;

?>
